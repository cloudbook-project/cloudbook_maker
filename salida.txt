{'matrix_info': None, 'input_dir': u'../example_program_001/input', 'matrix_data': None, 'output_dir': u'../cloudbook_agent/du_files', 'matrix_filled': None, 'num_dus': 2, 'con': <sqlite3.Connection object at 0x0000000004ECB940>}
>>>ENTER in graph_builder()...
>>>ENTER in file_scanner()...
>>>EXIT from file_scanner()...
el escaneo de files es :
{'./dir1': ['file1.py', 'file2.py'], './dir2': ['file3.py'], './': ['file_main.py']}
>>>ENTER in get_functions()...
fichero file1.py
me da tokens: [LexToken(IMPORT,'import file2',1,0), LexToken(FUN_DEF,'fa():',3,0), LexToken(LOOP_FOR,9,4,1), LexToken(INVOCATION,'file2.fb',5,9)]
['dir1.file1.fa']
fichero file2.py
me da tokens: [LexToken(FUN_DEF,'fb():',2,0), LexToken(PRINTV2,'print "@dir1.file2.f2: hello world"\n',3,1)]
['dir1.file1.fa', 'dir1.file2.fb']
fichero file3.py
me da tokens: [LexToken(IMPORT,'import threading',1,0), LexToken(FUN_DEF,'fc():',3,0), LexToken(PRINTV2,'print "@dir2.file3.f3: Hello world"\n',4,1), LexToken(FUN_DEF,'fd():',7,0), LexToken(FUN_DEF,'fe():',10,0)]
['dir1.file1.fa', 'dir1.file2.fb', 'dir2.file3.fc', 'dir2.file3.fd', 'dir2.file3.fe']
fichero file_main.py
me da tokens: [LexToken(IMPORT,'import dir1',1,0), LexToken(IMPORT,'import dir1',2,0), LexToken(IMPORT,'import dir2',3,0), LexToken(FUN_DEF,'main():',5,0), LexToken(INVOCATION,'file1.fa',6,6), LexToken(INVOCATION,'file3.fc',7,6), LexToken(INVOCATION,'main',9,0)]
['file_main.main', 'dir1.file1.fa', 'dir1.file2.fb', 'dir2.file3.fc', 'dir2.file3.fd', 'dir2.file3.fe']
['file_main.main', 'dir1.file1.fa', 'dir1.file2.fb', 'dir2.file3.fc', 'dir2.file3.fd', 'dir2.file3.fe']
=====================PARSER====================
../example_program_001/input
('Hay ', 6, 'funciones: ', ['file_main.main', 'dir1.file1.fa', 'dir1.file2.fb', 'dir2.file3.fc', 'dir2.file3.fd', 'dir2.file3.fe'])
Sacamos los ficheros que tenemos que buscar
funcion: main modulo: file_main path: ../example_program_001/input/file_main.py
funcion: fa modulo: dir1.file1 path: ../example_program_001/input/dir1/file1.py
funcion: fb modulo: dir1.file2 path: ../example_program_001/input/dir1/file2.py
funcion: fc modulo: dir2.file3 path: ../example_program_001/input/dir2/file3.py
funcion: fd modulo: dir2.file3 path: ../example_program_001/input/dir2/file3.py
funcion: fe modulo: dir2.file3 path: ../example_program_001/input/dir2/file3.py
('ficheros a buscar', [u'../example_program_001/input/file_main.py', u'../example_program_001/input/dir1/file1.py', u'../example_program_001/input/dir1/file2.py', u'../example_program_001/input/dir2/file3.py'])
('tokens encontrados', {'dir1.file1': [LexToken(IMPORT,'import file2',1,0), LexToken(FUN_DEF,'fa():',3,0), LexToken(LOOP_FOR,9,4,1), LexToken(ASSIGNATION,'hola=',5,2), LexToken(INVOCATION,'file2.fb',5,2)], 'dir1.file2': [LexToken(FUN_DEF,'fb():',2,0), LexToken(PRINTV2,'print "@dir1.file2.f2: hello world"\n',3,1)], 'dir2.file3': [LexToken(IMPORT,'import threading',1,0), LexToken(FUN_DEF,'fc():',3,0), LexToken(PRINTV2,'print "@dir2.file3.f3: Hello world"\n',4,1), LexToken(FUN_DEF,'fd():',7,0), LexToken(FUN_DEF,'fe():',10,0)], 'file_main': [LexToken(IMPORT,'import dir1.file1',1,0), LexToken(IMPORT,'import dir1.file2',2,0), LexToken(IMPORT,'import dir2.file3',3,0), LexToken(FUN_DEF,'main():',5,0), LexToken(INVOCATION,'dir1.file1.fa',6,1), LexToken(INVOCATION,'dir2.file3.fc',7,1), LexToken(INVOCATION,'main',9,0)]})
Voy a parsear los tokens
De las funciones ['file_main.main', 'dir1.file1.fa', 'dir1.file2.fb', 'dir2.file3.fc', 'dir2.file3.fd', 'dir2.file3.fe']
dir1.file1
('FUN_DEF: ', 'fa(): values: [1] invocator: dir1.file1.fa')
FOR: valores: [1, 9]
INVOCATION: La funcion: dir1.file1.fa invoca a dir1.file2.fb 9 veces
dir1.file2
('FUN_DEF: ', 'fb(): values: [1, 9] invocator: dir1.file2.fb')
dir2.file3
('FUN_DEF: ', 'fc(): values: [1, 9] invocator: dir2.file3.fc')
('FUN_DEF: ', 'fd(): values: [1, 9] invocator: dir2.file3.fd')
('FUN_DEF: ', 'fe(): values: [1, 9] invocator: dir2.file3.fe')
file_main
('FUN_DEF: ', 'main(): values: [1, 9] invocator: file_main.main')
INVOCATION: La funcion: file_main.main invoca a dir1.file1.fa 1 veces
INVOCATION: La funcion: file_main.main invoca a dir2.file3.fc 1 veces
>>>EXIT from graph_builder()...
>>>ENTER in split_program()...
['Matrix', 'file_main.main', 'dir1.file1.fa', 'dir1.file2.fb', 'dir2.file3.fc']
['file_main.main', 0, 0, 0, 0]
['dir1.file1.fa', 1, 0, 0, 0]
['dir1.file2.fb', 0, 9, 0, 0]
['dir2.file3.fc', 1, 0, 0, 0]
>>>ENTER in iterate()...
>>>EXIT from iterate()...

THE COLLAPSED FINAL MATRIX IS:
['Matrix', ['file_main.main', 'dir2.file3.fc'], ['dir1.file1.fa', 'dir1.file2.fb']]
[['file_main.main', 'dir2.file3.fc'], 1, 0]
[['dir1.file1.fa', 'dir1.file2.fb'], 1, 9]
dus:  [1, 2, 3, 4]
	============== create du ===============
	Function list: file_main.main
